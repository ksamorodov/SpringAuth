/*
 * This file is generated by jOOQ.
 */
package ru.ksamorodov.springauth.adapters.db.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import ru.ksamorodov.springauth.adapters.db.jooq.tables.AuthUser;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUserRecord extends UpdatableRecordImpl<AuthUserRecord> implements Record10<UUID, String, String, String, LocalDateTime, String, String, String, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.auth_user.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.auth_user.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.auth_user.username</code>.
     */
    public void setUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.auth_user.username</code>.
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.auth_user.password_hash</code>.
     */
    public void setPasswordHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.auth_user.password_hash</code>.
     */
    public String getPasswordHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.auth_user.password_reset_token</code>.
     */
    public void setPasswordResetToken(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.auth_user.password_reset_token</code>.
     */
    public String getPasswordResetToken() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.auth_user.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.auth_user.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.auth_user.first_name</code>.
     */
    public void setFirstName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.auth_user.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.auth_user.last_name</code>.
     */
    public void setLastName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.auth_user.last_name</code>.
     */
    public String getLastName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.auth_user.role</code>.
     */
    public void setRole(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.auth_user.role</code>.
     */
    public String getRole() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.auth_user.blocked_at</code>.
     */
    public void setBlockedAt(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.auth_user.blocked_at</code>.
     */
    public LocalDateTime getBlockedAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>public.auth_user.is_valid_password</code>.
     */
    public void setIsValidPassword(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.auth_user.is_valid_password</code>.
     */
    public Boolean getIsValidPassword() {
        return (Boolean) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, String, String, String, LocalDateTime, String, String, String, LocalDateTime, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<UUID, String, String, String, LocalDateTime, String, String, String, LocalDateTime, Boolean> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AuthUser.AUTH_USER.ID;
    }

    @Override
    public Field<String> field2() {
        return AuthUser.AUTH_USER.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return AuthUser.AUTH_USER.PASSWORD_HASH;
    }

    @Override
    public Field<String> field4() {
        return AuthUser.AUTH_USER.PASSWORD_RESET_TOKEN;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return AuthUser.AUTH_USER.CREATED_AT;
    }

    @Override
    public Field<String> field6() {
        return AuthUser.AUTH_USER.FIRST_NAME;
    }

    @Override
    public Field<String> field7() {
        return AuthUser.AUTH_USER.LAST_NAME;
    }

    @Override
    public Field<String> field8() {
        return AuthUser.AUTH_USER.ROLE;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return AuthUser.AUTH_USER.BLOCKED_AT;
    }

    @Override
    public Field<Boolean> field10() {
        return AuthUser.AUTH_USER.IS_VALID_PASSWORD;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getPasswordHash();
    }

    @Override
    public String component4() {
        return getPasswordResetToken();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public String component6() {
        return getFirstName();
    }

    @Override
    public String component7() {
        return getLastName();
    }

    @Override
    public String component8() {
        return getRole();
    }

    @Override
    public LocalDateTime component9() {
        return getBlockedAt();
    }

    @Override
    public Boolean component10() {
        return getIsValidPassword();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getPasswordHash();
    }

    @Override
    public String value4() {
        return getPasswordResetToken();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public String value6() {
        return getFirstName();
    }

    @Override
    public String value7() {
        return getLastName();
    }

    @Override
    public String value8() {
        return getRole();
    }

    @Override
    public LocalDateTime value9() {
        return getBlockedAt();
    }

    @Override
    public Boolean value10() {
        return getIsValidPassword();
    }

    @Override
    public AuthUserRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AuthUserRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AuthUserRecord value3(String value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    public AuthUserRecord value4(String value) {
        setPasswordResetToken(value);
        return this;
    }

    @Override
    public AuthUserRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public AuthUserRecord value6(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public AuthUserRecord value7(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public AuthUserRecord value8(String value) {
        setRole(value);
        return this;
    }

    @Override
    public AuthUserRecord value9(LocalDateTime value) {
        setBlockedAt(value);
        return this;
    }

    @Override
    public AuthUserRecord value10(Boolean value) {
        setIsValidPassword(value);
        return this;
    }

    @Override
    public AuthUserRecord values(UUID value1, String value2, String value3, String value4, LocalDateTime value5, String value6, String value7, String value8, LocalDateTime value9, Boolean value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthUserRecord
     */
    public AuthUserRecord() {
        super(AuthUser.AUTH_USER);
    }

    /**
     * Create a detached, initialised AuthUserRecord
     */
    public AuthUserRecord(UUID id, String username, String passwordHash, String passwordResetToken, LocalDateTime createdAt, String firstName, String lastName, String role, LocalDateTime blockedAt, Boolean isValidPassword) {
        super(AuthUser.AUTH_USER);

        setId(id);
        setUsername(username);
        setPasswordHash(passwordHash);
        setPasswordResetToken(passwordResetToken);
        setCreatedAt(createdAt);
        setFirstName(firstName);
        setLastName(lastName);
        setRole(role);
        setBlockedAt(blockedAt);
        setIsValidPassword(isValidPassword);
    }
}
