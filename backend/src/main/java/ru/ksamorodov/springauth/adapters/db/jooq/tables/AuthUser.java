/*
 * This file is generated by jOOQ.
 */
package ru.ksamorodov.springauth.adapters.db.jooq.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.ksamorodov.springauth.adapters.db.jooq.Keys;
import ru.ksamorodov.springauth.adapters.db.jooq.Public;
import ru.ksamorodov.springauth.adapters.db.jooq.tables.records.AuthUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUser extends TableImpl<AuthUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auth_user</code>
     */
    public static final AuthUser AUTH_USER = new AuthUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthUserRecord> getRecordType() {
        return AuthUserRecord.class;
    }

    /**
     * The column <code>public.auth_user.id</code>.
     */
    public final TableField<AuthUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.auth_user.username</code>.
     */
    public final TableField<AuthUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.auth_user.email</code>.
     */
    public final TableField<AuthUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.auth_user.password_hash</code>.
     */
    public final TableField<AuthUserRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.auth_user.password_reset_token</code>.
     */
    public final TableField<AuthUserRecord, String> PASSWORD_RESET_TOKEN = createField(DSL.name("password_reset_token"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.auth_user.created_at</code>.
     */
    public final TableField<AuthUserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private AuthUser(Name alias, Table<AuthUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthUser(Name alias, Table<AuthUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    public AuthUser(String alias) {
        this(DSL.name(alias), AUTH_USER);
    }

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    public AuthUser(Name alias) {
        this(alias, AUTH_USER);
    }

    /**
     * Create a <code>public.auth_user</code> table reference
     */
    public AuthUser() {
        this(DSL.name("auth_user"), null);
    }

    public <O extends Record> AuthUser(Table<O> child, ForeignKey<O, AuthUserRecord> key) {
        super(child, key, AUTH_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuthUserRecord> getPrimaryKey() {
        return Keys.AUTH_USER_PKEY;
    }

    @Override
    public AuthUser as(String alias) {
        return new AuthUser(DSL.name(alias), this);
    }

    @Override
    public AuthUser as(Name alias) {
        return new AuthUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(String name) {
        return new AuthUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(Name name) {
        return new AuthUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
